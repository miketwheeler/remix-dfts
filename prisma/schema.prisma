// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// skills - A user can have many skills, and a skill can be used by many users
// teamLead - A user can only be a team lead of 1 team
// teams - A User can be a member of many teams, and a team can have many members(users)
// posts - A user can have many posts, a post can only belong to 1 user
model User {
  id              String      @id @default(uuid())
  role            Role?        
  firstName       String
  lastName        String
  email           String      @unique
  username        String      @unique
  passwordHash    String   
  devType         String?
  available       Boolean     @default(true)
  bio             String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  skills          Skills[]
  rating          Int         @default(5)
  teamLead        Team?       @relation(name: "TeamLead")
  teams           Team[]
  posts           Post[]
}

// teamLead - 1 team can only have 1 team lead(user)
// project - 1 team can have many projects
// members - A team can have many members(users), and a member(user) can be a member of many teams
model Team {
  id              String          @id @default(uuid())
  name            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  teamLead        User?           @relation(name: "TeamLead", fields: [teamLeadId], references: [id])
  teamLeadId      String?         @unique
  projects        Project[]
  members         User[]   
}

// category - A project can have many categories
// team & teamId - A project can only belong to 1 team
model Project {
  id              Int          @id @default(autoincrement())
  name            String
  type            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  synopsis        String
  description     String
  techStack       String?
  beginDate       DateTime?
  endDate         DateTime?
  active          Boolean         @default(false)
  milestone       Int             @default(0)
  deployed        Boolean         @default(false)
  funded          Boolean         @default(false)
  fundingGoal     Decimal         @default(0.0)
  fundingCurrent  Decimal         @default(0.0)
  category        Category[]      
  team            Team?            @relation(fields: [teamId], references: [id])
  teamId          String?          @unique
}



// user & userId - 1 post can only belong to 1 user
// category - A post can have many categories
model Post {
  id          Int      @id @default(autoincrement())
  title       String
  body        String
  published   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category[]  
}

// users - many skills can have many users
model Skills {
  id          Int         @id @default(autoincrement())
  name        String
  users       User[]
}

// projects - many categories can describe many projects, and many projects can be described by many categories
model Category {
  id          Int         @id @default(autoincrement())
  name        String
  projects    Project[]
  posts       Post[]
}

// userRole & userRoleId - 1 role can only belong to 1 user
model Role {
  id          Int         @id @default(autoincrement())
  name        String      @default("USER")
  userRole    User?       @relation(fields: [userId], references: [id])
  userId      String      @unique
}
